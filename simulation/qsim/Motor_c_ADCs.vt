// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2024 17:44:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Control_Motor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Control_Motor_vlg_sample_tst(
	areset,
	Der_Cerca,
	inclk0,
	Izq_Cerca,
	sampler_tx
);
input  areset;
input  Der_Cerca;
input  inclk0;
input  Izq_Cerca;
output sampler_tx;

reg sample;
time current_time;
always @(areset or Der_Cerca or inclk0 or Izq_Cerca)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Control_Motor_vlg_check_tst (
	locked,
	MD,
	MI,
	PWM,
	sampler_rx
);
input  locked;
input [1:0] MD;
input [1:0] MI;
input  PWM;
input sampler_rx;

reg  locked_expected;
reg [1:0] MD_expected;
reg [1:0] MI_expected;
reg  PWM_expected;

reg  locked_prev;
reg [1:0] MD_prev;
reg [1:0] MI_prev;
reg  PWM_prev;

reg [1:0] MD_expected_prev;
reg [1:0] MI_expected_prev;
reg  PWM_expected_prev;

reg [1:0] last_MD_exp;
reg [1:0] last_MI_exp;
reg  last_PWM_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	locked_prev = locked;
	MD_prev = MD;
	MI_prev = MI;
	PWM_prev = PWM;
end

// update expected /o prevs

always @(trigger)
begin
	MD_expected_prev = MD_expected;
	MI_expected_prev = MI_expected;
	PWM_expected_prev = PWM_expected;
end


// expected MD[ 1 ]
initial
begin
	MD_expected[1] = 1'b1;
	MD_expected[1] = #60000 1'bX;
end 
// expected MD[ 0 ]
initial
begin
	MD_expected[0] = 1'b1;
	MD_expected[0] = #60000 1'bX;
end 
// expected MI[ 1 ]
initial
begin
	MI_expected[1] = 1'bX;
end 
// expected MI[ 0 ]
initial
begin
	MI_expected[0] = 1'bX;
end 

// expected PWM
initial
begin
	PWM_expected = 1'bX;
end 
// generate trigger
always @(locked_expected or locked or MD_expected or MD or MI_expected or MI or PWM_expected or PWM)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected locked = %b | expected MD = %b | expected MI = %b | expected PWM = %b | ",locked_expected_prev,MD_expected_prev,MI_expected_prev,PWM_expected_prev);
	$display("| real locked = %b | real MD = %b | real MI = %b | real PWM = %b | ",locked_prev,MD_prev,MI_prev,PWM_prev);
`endif
	if (
		( MD_expected_prev[0] !== 1'bx ) && ( MD_prev[0] !== MD_expected_prev[0] )
		&& ((MD_expected_prev[0] !== last_MD_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[0] = MD_expected_prev[0];
	end
	if (
		( MD_expected_prev[1] !== 1'bx ) && ( MD_prev[1] !== MD_expected_prev[1] )
		&& ((MD_expected_prev[1] !== last_MD_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MD_expected_prev);
		$display ("     Real value = %b", MD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MD_exp[1] = MD_expected_prev[1];
	end
	if (
		( MI_expected_prev[0] !== 1'bx ) && ( MI_prev[0] !== MI_expected_prev[0] )
		&& ((MI_expected_prev[0] !== last_MI_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI_expected_prev);
		$display ("     Real value = %b", MI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MI_exp[0] = MI_expected_prev[0];
	end
	if (
		( MI_expected_prev[1] !== 1'bx ) && ( MI_prev[1] !== MI_expected_prev[1] )
		&& ((MI_expected_prev[1] !== last_MI_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MI_expected_prev);
		$display ("     Real value = %b", MI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MI_exp[1] = MI_expected_prev[1];
	end
	if (
		( PWM_expected_prev !== 1'bx ) && ( PWM_prev !== PWM_expected_prev )
		&& ((PWM_expected_prev !== last_PWM_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PWM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PWM_expected_prev);
		$display ("     Real value = %b", PWM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PWM_exp = PWM_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Control_Motor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg areset;
reg Der_Cerca;
reg inclk0;
reg Izq_Cerca;
// wires                                               
wire locked;
wire [1:0] MD;
wire [1:0] MI;
wire PWM;

wire sampler;                             

// assign statements (if any)                          
Control_Motor i1 (
// port map - connection between master ports and signals/registers   
	.areset(areset),
	.Der_Cerca(Der_Cerca),
	.inclk0(inclk0),
	.Izq_Cerca(Izq_Cerca),
	.locked(locked),
	.MD(MD),
	.MI(MI),
	.PWM(PWM)
);

// inclk0
always
begin
	inclk0 = 1'b0;
	inclk0 = #10000 1'b1;
	#10000;
end 

// areset
initial
begin
	areset = 1'b1;
	areset = #60000 1'b0;
end 

// Der_Cerca
initial
begin
	Der_Cerca = 1'b0;
	Der_Cerca = #220000 1'b1;
	Der_Cerca = #130000 1'b0;
	Der_Cerca = #200000 1'b1;
	Der_Cerca = #210000 1'b0;
end 

// Izq_Cerca
initial
begin
	Izq_Cerca = 1'b0;
	Izq_Cerca = #550000 1'b1;
	Izq_Cerca = #210000 1'b0;
end 

Control_Motor_vlg_sample_tst tb_sample (
	.areset(areset),
	.Der_Cerca(Der_Cerca),
	.inclk0(inclk0),
	.Izq_Cerca(Izq_Cerca),
	.sampler_tx(sampler)
);

Control_Motor_vlg_check_tst tb_out(
	.locked(locked),
	.MD(MD),
	.MI(MI),
	.PWM(PWM),
	.sampler_rx(sampler)
);
endmodule

